[1mdiff --git a/src/main/java/co/com/almundo/callcenter/Main.java b/src/main/java/co/com/almundo/callcenter/Main.java[m
[1mindex 40279a2..e6628e8 100644[m
[1m--- a/src/main/java/co/com/almundo/callcenter/Main.java[m
[1m+++ b/src/main/java/co/com/almundo/callcenter/Main.java[m
[36m@@ -1,43 +1,52 @@[m
 package co.com.almundo.callcenter;[m
 [m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m[32mimport java.net.URI;[m
[32m+[m
 import org.glassfish.grizzly.http.server.HttpServer;[m
 import org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpServerFactory;[m
 import org.glassfish.jersey.server.ResourceConfig;[m
[31m-[m
[31m-import java.io.IOException;[m
[31m-import java.net.URI;[m
[32m+[m[32mimport org.springframework.context.annotation.AnnotationConfigApplicationContext;[m
 [m
 /**[m
  * Main class.[m
  *[m
  */[m
 public class Main {[m
[31m-    // URL base de la soluci√≥n de Call-Center[m
[31m-    public static final String BASE_URI = "http://localhost:8080/callcenter/";[m
[31m-[m
[31m-    /**[m
[31m-     * Se arranca servidor de Grizzly HTTP utilizando el estandar JAX-RS[m
[31m-     * @return Grizzly HTTP server.[m
[31m-     */[m
[31m-    public static HttpServer startServer() {[m
[31m-    	// Se crear el ResourceConfig y se le indica el paquete a escanear[m
[31m-        final ResourceConfig rc = new ResourceConfig().packages("co.com.almundo");[m
[31m-[m
[31m-        // Se crea y arranca la instancia de grizzly http server[m
[31m-        return GrizzlyHttpServerFactory.createHttpServer(URI.create(BASE_URI), rc);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * Main method.[m
[31m-     * @param args[m
[31m-     * @throws IOException[m
[31m-     */[m
[31m-    public static void main(String[] args) throws IOException {[m
[31m-        final HttpServer server = startServer();[m
[31m-        System.out.println(String.format("Jersey app iniciada con WADL disponible en "[m
[31m-                + "%sapplication.wadl\nDe enter para detener el servicio...", BASE_URI));[m
[31m-        System.in.read();[m
[31m-        server.stop();[m
[31m-    }[m
[31m-}[m
[32m+[m	[32m// URL base de la soluci√≥n de Call-Center[m
[32m+[m	[32mpublic static final String BASE_URI = "http://localhost:8080/callcenter/";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Se arranca servidor de Grizzly HTTP utilizando el estandar JAX-RS[m
[32m+[m	[32m *[m[41m [m
[32m+[m	[32m * @return Grizzly HTTP server.[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic static HttpServer startServer() {[m
[32m+[m		[32m// Se crear el ResourceConfig y se le indica el paquete a escanear[m
[32m+[m		[32mfinal ResourceConfig rc = new ResourceConfig();[m
[32m+[m
[32m+[m		[32mrc.property("contextConfig", new AnnotationConfigApplicationContext(AppConfig.class));[m
[32m+[m		[32mrc.packages(true, "co.com.almundo.callcenter");[m
 [m
[32m+[m[32m//		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class);[m
[32m+[m[32m//		ctx.scan("co.com.almundo");[m
[32m+[m[32m//		ctx.refresh();[m
[32m+[m
[32m+[m		[32m// Se crea y arranca la instancia de grizzly http server[m
[32m+[m		[32mreturn GrizzlyHttpServerFactory.createHttpServer(URI.create(BASE_URI), rc);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Main method.[m
[32m+[m	[32m *[m[41m [m
[32m+[m	[32m * @param args[m
[32m+[m	[32m * @throws IOException[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic static void main(String[] args) throws IOException {[m
[32m+[m		[32mfinal HttpServer server = startServer();[m
[32m+[m		[32mSystem.out.println(String.format("Jersey app iniciada con WADL disponible en "[m
[32m+[m				[32m+ "%sapplication.wadl\nDe enter para detener el servicio...", BASE_URI));[m
[32m+[m		[32mSystem.in.read();[m
[32m+[m		[32mserver.stop();[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
